import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)



BOT_TOKEN = '7634211288:AAF2hG1BQaq_K4iVZM_NcJIkusq3O66MHSA'
INVITE_LINK = 'https://t.me/+GN1Ulgtpy3liNzFi'
ADMIN_CHAT_ID = 7533995960  # ‚Üê –≤—Å—Ç–∞–≤—å —Å–≤–æ–π chat_id

ASK_FIO = 0

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open(SPREADSHEET_NAME).sheet1
    return sheet

def check_fio_in_sheet(fio: str) -> bool:
    sheet = get_sheet()
    fio_list = sheet.col_values(1)
    fio_cleaned = fio.strip().lower()
    for row_fio in fio_list:
        if row_fio.strip().lower() == fio_cleaned:
            return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([["–°—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —á–∞—Ç.", reply_markup=keyboard)
    await update.message.reply_text(f"–í–∞—à chat_id: {update.message.chat_id}")

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    return ASK_FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    if len(fio.split()) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return ASK_FIO

    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Å –≤ –±–∞–∑–µ...")

    try:
        if check_fio_in_sheet(fio):
            await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:{INVITE_LINK}")
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –∫—É—Ä—Å–∞–Ω—Ç–æ–≤.")
    except Exception as e:
        error_text = f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ:{e}"
        await update.message.reply_text("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=error_text)
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ex}")

    return ConversationHandler.END

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–°—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞)$"), start_registration)],
        states={
            ASK_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == '__main__':
    main()

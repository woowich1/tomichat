import logging
import re
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)


BOT_TOKEN = '7634211288:AAF2hG1BQaq_K4iVZM_NcJIkusq3O66MHSA'
DSCONTROL_API_KEY = '4746eacc66eb4adc8ea22bd321a62a5b'
DSCONTROL_URL = 'https://app.dscontrol.ru/api/Search'
INVITE_LINK = 'https://t.me/+GN1Ulgtpy3liNzFi'
ADMIN_CHAT_ID = 7533995960  # ‚Üê –≤—Å—Ç–∞–≤—å —Å–≤–æ–π chat_id
ASK_FIO = 0

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([["–°—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —á–∞—Ç.", reply_markup=keyboard)
    await update.message.reply_text(f"–í–∞—à chat_id: {update.message.chat_id}")

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    return ASK_FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()

    if len(fio.split()) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return ASK_FIO

    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Å –≤ –±–∞–∑–µ –∞–≤—Ç–æ—à–∫–æ–ª—ã...")

    try:
        if check_in_dscontrol(fio):
            await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:{INVITE_LINK}")
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∫—É—Ä—Å–∞–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤.")
    except Exception as e:
        error_text = f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:{e}"
        await update.message.reply_text("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=error_text)
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {ex}")

    return ConversationHandler.END

def check_in_dscontrol(fio: str) -> bool:
    query = fio
    headers = {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'api_key': DSCONTROL_API_KEY,
    }

    try:
        response = requests.get(DSCONTROL_URL, headers=headers, params={'search': query})
        data = response.json()
        logger.warning(f"[DEBUG] –û—Ç–≤–µ—Ç API: {data}")

        if isinstance(data, list):
            results = data
        elif isinstance(data, dict):
            results = data.get("data", [])
        else:
            raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(data)}")

        for item in results:
            if not isinstance(item, dict):
                continue

            if item.get("Type", "").lower() == "student":
                role = item.get("Role") or item.get("role") or item.get("Status") or item.get("status") or ""
                role = role.lower()
                if role in ("–∫—É—Ä—Å–∞–Ω—Ç", "–≤—ã–ø—É—Å–∫–Ω–∏–∫", "student", "graduate"):
                    return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ API: {e}")

    return False

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–°—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞)$"), start_registration)],
        states={
            ASK_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == '__main__':
    main()
